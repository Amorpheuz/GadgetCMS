@model List<Review>
@using System.Security.Cryptography
@using System.Text
@using GadgetCMS.Areas.Identity.Data
@inject UserManager<GadgetCMSUser> UserManager
@inject SignInManager<GadgetCMSUser> SignInManager


@{
    var counter = 0;
    var articleId = 0;
    if (Model.FirstOrDefault() != null)
    {
        articleId = Model.FirstOrDefault().ArticleId;
    }
    string GetPrettyDate(DateTime d)
    {
        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(d);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
                dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
                Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }
}

<div class="row">
    <div class="col">
        <h2>Reviews</h2>
    </div>
    <div class="col">
        @if (Model.FirstOrDefault() != null)
        {
            <div id="reviewCompChart">

            </div>
        }
    </div>
    <div class="col d-flex justify-content-end">
        <div>
            @if (Model.FirstOrDefault() == null && SignInManager.IsSignedIn(User))
            {
                <a asp-page="/Review/Create" asp-route-articleId="@ViewBag.ArtId" class="btn btn-primary">Add Opinion</a>
            }
            else if (Model.FirstOrDefault() != null && SignInManager.IsSignedIn(User))
            {
                @if (ViewBag.UserHasComment != null)
                {
                    <a asp-page="/Review/Edit" asp-route-id="@articleId" class="btn btn-primary">Edit Opinion</a>
                }
                else
                {
                    <a asp-page="/Review/Create" asp-route-articleId="@articleId" class="btn btn-primary">Add Opinion</a>
                }
            }
        </div>
    </div>
</div>

@if (Model.FirstOrDefault() == null)
{
    <text>No Reviews Yet</text>
}
else
{
    <script src="~/lib/quill-delta-to-html/QuillDeltaToHtmlConverter.bundle.js"></script>
    <ul class="list-unstyled">
        @foreach (var item in Model)
        {
            if (item.ReviewVisible == true)
            {
                var ider = "review" + counter;
                <li class="media mb-1">
                    @{
                        var email = @item.GadgetCmsUser.Email;
                        var emailHash = "";
                        using (MD5 md5Hash = MD5.Create())
                        {
                            var data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(email));
                            var sBuilder = new StringBuilder();
                            foreach (var t in data)
                            {
                                sBuilder.Append(t.ToString("x2"));
                            }
                            emailHash = "https://www.gravatar.com/avatar/" + sBuilder.ToString() + "?d=identicon&s=85";
                        }
                        <img alt="@email" src="@emailHash" class="align-self-center mr-3 rounded-circle">
                    }
                    <div class="media-body">
                        <div class="row">
                            <div class="col-sm-8">
                                <h5 class="mt-0">@item.ReviewTitle</h5>
                            </div>
                            <div class="col-sm-4 d-flex justify-content-end">
                                @await Component.InvokeAsync("RatingDisplay", new { articleId = item.Article.ArticleId, userId = item.GadgetCmsUser.Id })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-4">
                                <p class="text-muted"><i class="fa fa-user" aria-hidden="true"></i> @item.GadgetCmsUser.Email</p>
                            </div>
                            <div class="col-sm-4 d-flex justify-content-center">
                                <p><i class="fa fa-calendar" aria-hidden="true"></i> @GetPrettyDate(@item.ReviewCreated.ToLocalTime())</p>
                            </div>
                            <div class="col-sm-4 d-flex justify-content-end">
                                <div>
                                    @if (SignInManager.IsSignedIn(User))
                                    {
                                        @if (item.UserId == UserManager.GetUserId(User))
                                        {
                                            <a asp-page="/Review/Edit" asp-route-id="@item.ArticleId">Edit</a>
                                            <text> | </text>
                                            <a asp-page="/Review/Delete" asp-route-id="@item.ArticleId" asp-route-userEmail="@item.GadgetCmsUser.Email">Delete</a>
                                            <text> | </text>
                                        }
                                    }
                                    <a asp-page="/Review/Details" asp-route-id="@item.ArticleId" asp-route-userEmail="@item.GadgetCmsUser.Email">Details</a>

                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div id="@ider">
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
                <hr class="w-75 mb-1" />
                <script>
                    var delta = @Html.Raw(item.ReviewContent);
                    var qdc = new window.QuillDeltaToHtmlConverter(delta.ops, {});
                    var html = qdc.convert();
                    document.getElementById('@ider').innerHTML = html;
                </script>
                counter++;
            }
        }
    </ul>
}
@if (Model.FirstOrDefault() != null)
{
    <a asp-page="/Review/Index" asp-route-id="@Model.First().Article.ArticleId" class="btn btn-outline-primary">More User Opinions</a>
}


@if (Model.FirstOrDefault() != null)
{
    <script src="~/lib/charts-master/dist/frappe-charts.min.iife.js"></script>
    <script>
    let revData = {
        labels: ["Positive Reviews", "Negative Reviews"],
        datasets: [
            {values: [@ViewBag.PosReviews, @ViewBag.NegReviews]}
        ]
    }

    new frappe.Chart("#reviewCompChart", {
        data: revData,
        type: 'percentage',
        colors: ['green', 'red']
    });
    </script>
}

