@model List<Data.Article>
@{
    Data.Article articles = new Data.Article();
     string GetPrettyDate(DateTime d)
    {
        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(d);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
                dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
                Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }

}

@if (Model.FirstOrDefault() == null)
{
    <h6>No Popular Articles ATM.</h6>
}
else
{
    @foreach (var reviewsFE in Model)
    {
        <div class="card mb-2">
            <div class="card-body">

                <div class="row">
                    <div class="col-md-9">
                        <div class="row">
                            <div class="col-sm-8">
                                <p>@reviewsFE.ArticleAuthor</p>
                            </div>
                            <div class="col-sm-4">
                                <p>@GetPrettyDate(reviewsFE.ArticleCreated.ToLocalTime())</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <h6 class="font-weight-bold"><a asp-page="./Article/Details" asp-route-id="@reviewsFE.ArticleId">@reviewsFE.ArticleName</a></h6>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <p class="text-muted">@reviewsFE.ArticleSubtitle</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 d-flex justify-content-center">
                        <div class="row">
                            <div class="col-sm-12">
                                @{
                                    var base64 = Convert.ToBase64String(reviewsFE.ArticlePictures.First().ArticlePictureBytes);
                                    var imgSrc = $"data:image/gif;base64,{base64}";
                                }
                                <img src="@imgSrc" class="img-fluid" style="height:100px;" />
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
        <hr width="80%" />

    }
    <button type="button" class="btn btn-primary  position-right" id="btn_popularKnowMore">Know More</button>
}
